#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('jankenonline2:server');
var http = require('http');
//var socketIO = require('../routes/socketIO')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
//socketIO();
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

 
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var express = require('express');
var router = express.Router();
const User = require('../models/user');
const { count } = require('console');

var io = require('socket.io')(server);

global.numToJanken = {0: "グー", 1: "チョキ", 2: "パー"};
global.te = {}; //socketId: ユーザーの次の手
global.countPeople = {}; //roomId: ルームにいるユーザーの数
global.roomMember = {}; //roomId: ルームにいるユーザー1のID(user, socket), ユーザー2のID(user, socket)
global.userResult = {}; //userId: 勝ち, あいこ, 負け, gu, choki, pa

for (let roomId = 0; roomId < 10000; roomId++) {
  countPeople[roomId.toString()] = 0;
  roomMember[roomId.toString()] = [null, null];
}

io.sockets.on('connection', function(socket){
  var roomId = "", username = "", userId = "", userNumber = 0, hand=-1, id = socket.id;
  var opponentName, opponentId;
  console.log("connected");
  //socket処理
  socket.on('join',function(data){
      roomId = data.roomId, username = data.username, userId = data.userId;
      socket.join(roomId);
      countPeople[roomId]++;
      te[id] = -1;
      if(!roomMember[roomId][0].userId){
        roomMember[roomId][0] = {userId: userId, socketId: socket.id};
      }else roomMember[roomId][1] = {userId: userId, socketId: socket.id};
      console.log(roomId + "に" + username + "さんが参加しました。接続人数:" + countPeople[roomId]);
      if(countPeople[roomId] == 2){
        //janken_start
        io.sockets.in(roomId).emit("janken_start");
      }
  });
  socket.on('sendDataToOpponent_s', (data) => {
    opponentName = data.username;
    if(roomMember[roomId][0] === userId) opponentId = roomMember[roomId][1].socketId;
    else opponentId = roomMember[roomId][0].socketId;
    io.to(opponentId).emit('sendDataToOpponent_c', {opponentName: username});
  })
  socket.on('janken_to_server', (data) => {
    te[socket.id] = data.te;
    if(te[opponentId] != -1){
      console.log("ジャンケン可能");
      var te0 = parseInt(te[roomMember[roomId][0].socketId]), 
      te1 = parseInt(te[roomMember[roomId][1]].socketId);
      if(te1 === te0){
        io.sockets.in(room).emit("result", {res:0});
      }else if((te0+1)%3 === te1){//te0がかつ
        io.to(roomMember[roomId][0].socketId).emit('result', {res: 1});
        io.to(roomMember[roomId][1].socketId).emit('result', {res: -1});
      }else{//te1がかつ
        io.to(roomMember[roomId][1].socketId).emit('result', {res: 1});
        io.to(roomMember[roomId][0].socketId).emit('result', {res: -1});
      }
      te[id] = -1;
      te[opponentId] = -1;
    }else{
      console.log("相手の手を待っています")
    }
  })
  socket.on('disconnect', () => {
    te[id] = -1;
    countPeople[roomId] = io.sockets.adapter.rooms[roomId].length || 0;
    console.log(username + "さんが" + roomId + "から退出しました。接続人数:" + countPeople[roomId]);
    if(countPeople[roomId] < 0 || !countPeople[roomId]) countPeople[roomId]=0;
    io.sockets.in(roomId).emit("message_to_client", {value:"対戦相手が退出しました"});
  })

});

//module.exports = {userMap, roomMap};

