#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('jankenonline2:server');
var http = require('http');
//var socketIO = require('../routes/socketIO')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
//socketIO();
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

 
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var express = require('express');
var router = express.Router();
const User = require('../models/user');
const Result = require('../models/result');
const { count } = require('console');

var io = require('socket.io')(server);

global.numToJanken = {0: "グー", 1: "チョキ", 2: "パー"};
global.te = {}; //socketId: ユーザーの次の手
global.countPeople = {}; //roomId: ルームにいるユーザーの数
global.roomMember = {}; //roomId: ルームにいるユーザー1のID(user, socket), ユーザー2のID(user, socket)
global.userResult = {}; //socketid: userId, 勝ち, あいこ, 負け, gu, choki, pa

function gcpUpdate(id, te) {
  if(te === 0) userResult[id].gu += 1;
  if(te === 1) userResult[id].choki += 1;
  if(te === 2) userResult[id].pa += 1;
}
for (let roomId = 0; roomId < 10000; roomId++) {
  countPeople[roomId.toString()] = 0;
  roomMember[roomId.toString()] = [null, null];
}

io.sockets.on('connection', function(socket){
  var roomId = "", username = "", userId = "", id = socket.id;
  var opponentName = null, opponentId = null;
  console.log("connected");
  //socket処理
  socket.on('join',function(data){
      roomId = data.roomId, username = data.username, userId = data.userId;
      socket.join(roomId);
      let promise = new Promise((resolve, reject) => { // #1
        io.in(roomId).clients((error, clients) => {
          if(error) throw error;
          console.log(clients, clients.length);
          countPeople[roomId] = clients.length;
        });
        resolve("ok")
      });
      promise.then(()=>{
        userResult[id] = {userId: userId, win:0, draw:0, lose:0, gu: 0, choki:0, pa:0};
        te[id] = -1;
        if(!roomMember[roomId][0].userId){
          roomMember[roomId][0] = {userId: userId, socketId: socket.id};
        }else roomMember[roomId][1] = {userId: userId, socketId: socket.id};
        console.log(roomId + "に" + username + "さんが参加しました。接続人数:" + countPeople[roomId]);
        if(countPeople[roomId] == 2){
          //janken_start
          io.sockets.in(roomId).emit("janken_start");
        }
      });
  });
  socket.on('message_to_server', (data) => {
    io.sockets.in(roomId).emit("message_to_client", {msg:data.msg});
  })
  socket.on('sendDataToOpponent_s', (data) => {
    console.log('sendDataToOpponent_s: '+data.username);
    opponentName = data.username;
    if(roomMember[roomId][0] === userId) opponentId = roomMember[roomId][1].socketId;
    else opponentId = roomMember[roomId][0].socketId;
    io.to(opponentId).emit('sendDataToOpponent_c', {opponentName: username});
  })
  socket.on('janken_to_server', (data) => {
    console.log("janken_to_server" + data.te);
    te[socket.id] = data.te;
    if(opponentId && te[opponentId] != -1 && te[id] != -1){
      console.log("ジャンケン可能");
      var id0 = roomMember[roomId][0].socketId, id1 = te[roomMember[roomId][1].socketId];
      var te0 = parseInt(id0), 
      te1 = parseInt(id1);
      gcpUpdate(id0, te0);
      gcpUpdate(id1, te1);
      var stringTe0 = numToJanken(te0), stringTe1 = numToJanken(te1);
      if(te1 === te0){
        userResult[id0].draw += 1;
        userResult[id1].draw += 1;
        io.sockets.in(room).emit("result", {res:0, you: stringTe0, oppo: stringTe1});
      }else if((te0+1)%3 === te1){//te0がかつ
        io.to(id0).emit('result', {res: 1, you: stringTe0, oppo: stringTe1});
        io.to(id1).emit('result', {res: -1, you: stringTe1, oppo: stringTe0});
      }else{//te1がかつ
        io.to(id1).emit('result', {res: 1, you: stringTe1, oppo : stringTe0});
        io.to(id0).emit('result', {res: -1, you: stringTe0, oppo: stringTe1});
      }
      te[id] = -1;
      te[opponentId] = -1;
    }else{
      console.log("相手の手を待っています")
    }
  })
  socket.on('disconnect', () => {
    te[id] = -1;
    socket.leave(roomId);
    let promise = new Promise((resolve, reject) => { // #1
      io.in(roomId).clients((error, clients) => {
        if(error) throw error;
        console.log(clients, clients.length);
        countPeople[roomId] = clients.length;
      });
      resolve('disconnect')
    })
    promise.then(() => {
      if(roomMember[roomId][0].socketId === id) roomMember[roomId][0] = {userId: null, username: null, socketId: null};
      else roomMember[roomId][1] = {userId: null, username: null, socketId: null};
      console.log(username + "さんが" + roomId + "から退出しました。接続人数:" + countPeople[roomId]);
      if(countPeople[roomId] < 0 || !countPeople[roomId]) countPeople[roomId]=0;
      io.sockets.in(roomId).emit("message_to_client", {msg:"対戦相手が退出しました"});
      Result.findOne({
        where: {userTwitterId: userId}
        }
      ).then((result) => {
        Result.update({ 
          win: result.win + userResult[id].win,
          draw: result.draw + userResult[id].draw,
          lose: result.lose + userResult[id].lose,
          gu: result.gu + userResult[id].gu,
          choki: result.choki + userResult[id].choki,
          pa: result.pa + userResult[id].pa
        }, { where: {userTwitterId: userId} }).then(()=>{
          console.log("結果をアップデートしました")
        });
      })
    });
 
  });
});

//module.exports = {userMap, roomMap};

